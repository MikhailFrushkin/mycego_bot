import ast
import json
import os
import random

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

import bot
from data.config import path
from data.db import User
from data.api import check_user_api, create_or_get_apport, get_appointments, delete_appointments, get_works, post_works, \
    get_works_lists, get_details_works_lists, del_works_lists, get_data_delivery
from handlers.users.back import back
from keyboards.default.menu import menu_keyboards
from keyboards.inline.action import generate_next_week_dates_keyboard, generate_time_keyboard, generate_time_keyboard2, \
    generate_works, generate_current_week_works_dates, create_works_list, delete_button, generate_works_base, \
    delivery_keyboard, call_back
from loader import dp, bot
from state.states import AuthState, WorkGraf, WorkList, ViewWorkList, WorkListDelivery


@dp.message_handler(commands=['start'], state='*')
async def bot_start(message: types.Message, state: FSMContext):
    """
    –°—Ç–∞—Ä—Ç –±–æ—Ç–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å
    """
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {}: {} {} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É {}'.format(
        message.from_user.id,
        message.from_user.first_name,
        message.from_user.username,
        message.text
    ))
    await back(message, state)

    hello = os.listdir('stickers')
    sticker = open('{}/stickers/{}'.format(path, random.choice(hello)), 'rb')
    await bot.send_sticker(message.chat.id, sticker)

    try:
        user = User.get(telegram_id=str(message.from_user.id))
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {}!'
                             .format(message.from_user.first_name),
                             reply_markup=menu_keyboards(message.from_user.id))
    except:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {}! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:".format(message.from_user.first_name))
        await AuthState.waiting_for_login.set()


@dp.message_handler(state=AuthState.waiting_for_login)
async def process_login(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['login'] = message.text

    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await AuthState.waiting_for_password.set()


@dp.message_handler(state=AuthState.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        login = data['login']
        password = message.text

        user_id = check_user_api(login, password)
        if user_id:
            user = User.create(telegram_id=str(message.from_user.id),
                               site_user_id=str(user_id['id']),
                               username=str(login),
                               username_tg=str(message.from_user.username),
                               first_name=str(message.from_user.first_name),
                               last_name=str(message.from_user.last_name),
                               role=str(user_id['role']),
                               )
            user.save()
            await message.answer("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!", reply_markup=menu_keyboards(message.from_user.id))
            await state.finish()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
            await AuthState.waiting_for_login.set()


@dp.message_handler(lambda message: not message.text.isdigit(), state=WorkList.input_num)
async def process_amount_invalid(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")


@dp.message_handler(state=WorkList.input_num)
async def nums_works(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current_work = data.get('current_work')
        if current_work is None:
            await message.answer("–û—à–∏–±–∫–∞: –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã —Å–Ω–∞—á–∞–ª–∞.")
            return

        try:
            quantity = int(message.text)
            if quantity < 0:
                await message.answer("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            else:
                if 'works' not in data:
                    data['works'] = {}  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

                data['works'][current_work] = quantity  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å
                await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ {quantity} –µ–¥–∏–Ω–∏—Ü —Ä–∞–±–æ—Ç—ã.")

                # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç
                mes = await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', –µ—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∑–∞–Ω—ã.",
                    reply_markup=generate_works())
                data['mes'] = mes
                await WorkList.choice_work.set()

        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", reply_markup=call_back)


@dp.message_handler(state=WorkListDelivery.input_num)
async def nums_works(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current_work = data.get('current_work')
        if current_work is None:
            await message.answer("–û—à–∏–±–∫–∞: –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã —Å–Ω–∞—á–∞–ª–∞.")
            return

        try:
            quantity = int(message.text)
            if quantity < 0:
                await message.answer("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            else:
                if 'works' not in data:
                    data['works'] = {}  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

                data['works'][current_work] = quantity  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å
                await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ {quantity} –µ–¥–∏–Ω–∏—Ü —Ä–∞–±–æ—Ç—ã.")

                # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç
                mes = await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', –µ—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∑–∞–Ω—ã.",
                    reply_markup=generate_works(delivery=True))
                data['mes'] = mes
                await WorkListDelivery.choice_work.set()

        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", reply_markup=call_back)


@dp.message_handler(content_types=['text'], state='*')
async def bot_message(message: types.Message, state: FSMContext):
    try:
        user = User.get(telegram_id=str(message.from_user.id))
        user_id_site = user.site_user_id
        text = message.text
        user_id = message.from_user.id
        if text == '–ù–∞–∑–∞–¥':
            await back(message, state)
        elif text == 'üóì–ó–∞—è–≤–∫–∞ –≤ –≥—Ä–∞—Ñ–∏–∫':
            await WorkGraf.choice_date.set()
            await bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:',
                                   reply_markup=generate_next_week_dates_keyboard())
        elif text == 'üìï–ú–æ–∏ –∑–∞–ø–∏—Å–∏':

            ap_list = get_appointments(user_id_site).get('message')
            await bot.send_message(user_id, '–ó–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:')
            await WorkGraf.delete_row.set()
            for index, item in enumerate(ap_list, start=1):
                verified = '‚úÖ–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' if item[3] else '‚õîÔ∏è–ù–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
                message_text = f'{index}. {item[0]} —Å {item[1].replace(":00:00", ":00")} ' \
                               f'–ø–æ {item[2].replace(":00:00", ":00")} \n{verified}'

                keyboard = types.InlineKeyboardMarkup()
                delete_button = types.InlineKeyboardButton("üö´–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{item[4]}")
                keyboard.add(delete_button)
                if item[3]:
                    await bot.send_message(user_id, message_text)
                else:
                    await bot.send_message(user_id, message_text, reply_markup=keyboard)
        elif text == 'üî®–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ª–∏—Å—Ç —Ä–∞–±–æ—Ç –Ω–∞ –¥–µ–Ω—å':
            async with state.proxy() as data:
                mes = await bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:',
                                             reply_markup=generate_current_week_works_dates())
                data['mes'] = mes
                await WorkList.choice_date.set()

        elif text == 'üìù–ú–æ–∏ –ª–∏—Å—Ç—ã —Ä–∞–±–æ—Ç –∑–∞ –¥–µ–Ω—å':
            works_lists = get_works_lists(user_id_site).get('data')
            if len(works_lists) > 0:
                async with state.proxy() as data:
                    mes = await bot.send_message(user_id, "–í–∞—à–∏ —Å–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã:",
                                                 reply_markup=create_works_list(works_lists))
                    data['mes'] = mes
                    await ViewWorkList.view_work.set()

            else:
                await bot.send_message(user_id, "–ù–∏ —á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=menu_keyboards(message.from_user.id))
        elif text == 'üõ†Ô∏è–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—ã –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ':
            async with state.proxy() as data:
                mes = await bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:',
                                             reply_markup=generate_current_week_works_dates())
                data['mes'] = mes
                await WorkListDelivery.choice_date.set()
        elif text == 'üì¶–ú–æ–∏ –ø–æ—Å—Ç–∞–≤–∫–∏':
            await bot.send_message(user_id, "–í–∞—à–∏ —Å–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:",
                                   reply_markup=menu_keyboards(message.from_user.id))
            user_id_site = User.get(User.telegram_id == message.from_user.id).site_user_id
            data_delivery = get_data_delivery(user_id_site).get('data', None)
            if data_delivery:
                message_bot = ''
                for key, value in data_delivery.items():
                    message_bot += f"\n{key}\n"
                    for i, j in value.items():
                        message_bot += f'    {i}: {j}\n'
                await bot.send_message(user_id, message_bot)
            else:
                await bot.send_message(user_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é",
                                       reply_markup=menu_keyboards(message.from_user.id))
        elif text == '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç':
            generate_works_base()
        else:
            await bot.send_message(user_id, text)

        await bot.send_message(880277049,
                               f'{user.username} - {message.text}')
    except Exception as ex:
        logger.error(ex)
        await back(message, state)
        # await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
        # await AuthState.waiting_for_login.set()


@dp.callback_query_handler(state=[WorkGraf.choice_date])
async def process_date(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if callback_query.data == 'exit':
            await back(callback_query, state)
        else:
            date = callback_query.data.split('_')[1]
            data['date'] = date
            await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å:',
                                   reply_markup=generate_time_keyboard())
            await WorkGraf.choice_time.set()


@dp.callback_query_handler(state=[WorkGraf.choice_time])
async def process_time(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'exit':
        await back(callback_query, state)
    else:
        async with state.proxy() as data:
            start_time = callback_query.data
            data['start_time'] = start_time
            await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ:',
                                   reply_markup=generate_time_keyboard2())
            await WorkGraf.choice_time2.set()


@dp.callback_query_handler(state=[WorkGraf.choice_time2])
async def process_time2(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'exit':
        await back(callback_query, state)
    else:
        async with state.proxy() as data:
            end_time = callback_query.data
            data['end_time'] = end_time
            if int(data['end_time'].replace(':00', '')) < int(data['start_time'].replace(':00', '')):
                await bot.send_message(callback_query.from_user.id,
                                       '–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!',
                                       reply_markup=menu_keyboards(callback_query.from_user.id))
            else:
                user_id_site = User.get(User.telegram_id == callback_query.from_user.id).site_user_id
                code = create_or_get_apport(date=data['date'], start_time=data['start_time'],
                                            end_time=data['end_time'], user_id_site=user_id_site)
                if code == 401:
                    await bot.send_message(callback_query.from_user.id, f'üõë–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –µ—Å—Ç—åüõë')
                elif code == 200:
                    await bot.send_message(callback_query.from_user.id, f'‚úÖ–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞‚úÖ')
                elif code == 403:
                    await bot.send_message(callback_query.from_user.id, f'‚ùå–í—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ‚ùå')
                elif code == 500:
                    await bot.send_message(callback_query.from_user.id, f'‚ò£Ô∏è–û—à–∏–±–∫–∞‚ò£Ô∏è')
            await state.finish()


@dp.callback_query_handler(state=[WorkGraf.delete_row])
async def del_row(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'exit':
        await back(callback_query, state)
    else:
        row_id = callback_query.data.split('_')[1]
        user_id_site = User.get(User.telegram_id == callback_query.from_user.id).site_user_id
        code = delete_appointments(user_id_site, row_id)
        if code == 200:
            await bot.send_message(callback_query.from_user.id, '‚úÖ–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!‚úÖ')
        else:
            await bot.send_message(callback_query.from_user.id, '‚ò£Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!‚ò£Ô∏è')
        await state.finish()


@dp.callback_query_handler(state=[WorkList.choice_date])
async def add_work_list(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'exit':
        await back(callback_query, state)
    else:
        async with state.proxy() as data:
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=data['mes'].message_id)
            date = callback_query.data.split('_')[1]
            data['date'] = date
            mes = await bot.send_message(callback_query.from_user.id, f'{date}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:',
                                         reply_markup=generate_works())
            data['mes'] = mes
            await WorkList.choice_work.set()


@dp.callback_query_handler(state=[WorkList.choice_work, WorkList.input_num])
async def add_works(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'exit':
        await back(callback_query, state)
    else:
        async with state.proxy() as data:
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=data['mes'].message_id)
            if callback_query.data == 'send':
                date = data.get('date')
                works = data.get('works')
                if not works:
                    await bot.send_message(callback_query.from_user.id, '‚ùóÔ∏è–í—ã –Ω–∏ —á–µ–≥–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å‚ùóÔ∏è',
                                           reply_markup=menu_keyboards(callback_query.from_user.id))
                else:
                    user_id_site = User.get(User.telegram_id == callback_query.from_user.id).site_user_id
                    code = post_works(date, user_id_site, works)
                    if code == 200:
                        mes = '‚úÖ–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ‚úÖ'
                    elif code == 401:
                        mes = 'üõë–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —Å—É—â–µ—Å—Ç–≤—É–µ—Çüõë'
                    elif code == 403:
                        mes = '‚ùå–í—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ‚ùå'
                    else:
                        mes = '‚ò£Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞‚ò£Ô∏è'
                    await bot.send_message(callback_query.from_user.id, mes,
                                           reply_markup=menu_keyboards(callback_query.from_user.id))
                await state.reset_state()
                await state.finish()
            else:
                work_id = callback_query.data.split('_')
                data['current_work'] = int(work_id[1])
                await bot.send_message(callback_query.from_user.id,
                                       f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')
                await WorkList.input_num.set()


@dp.callback_query_handler(state=[ViewWorkList.view_work])
async def view_work(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'exit':
        await back(callback_query, state)
    else:
        async with state.proxy() as data:
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=data['mes'].message_id)

            work_id = callback_query.data.split('_')
            is_checked = work_id[2]
            data = get_details_works_lists(work_id[0]).get('data')
            if isinstance(data, dict):
                mes = f'{work_id[1]}\n'
                mes += '‚úÖ–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' if is_checked == 'True' else '‚õîÔ∏è–ù–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
                for key, value in data.items():
                    mes += f'\n{key} - {value}'
                if not is_checked == 'True':
                    await bot.send_message(callback_query.from_user.id, mes, reply_markup=delete_button(work_id[0]))
                    await ViewWorkList.del_work.set()
                else:
                    await bot.send_message(callback_query.from_user.id, mes)

            else:
                await bot.send_message(callback_query.from_user.id, data)


@dp.callback_query_handler(state=[ViewWorkList.del_work])
async def del_work(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'exit':
        await back(callback_query, state)
    else:
        work_id = int(callback_query.data.split('_')[1])
        user_id_site = User.get(User.telegram_id == callback_query.from_user.id).site_user_id
        code = del_works_lists(work_id, user_id_site)
        if code == 200:
            await bot.send_message(callback_query.from_user.id, '‚úÖ–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞‚úÖ',
                                   reply_markup=menu_keyboards(callback_query.from_user.id))
        else:
            await bot.send_message(callback_query.from_user.id, '‚õîÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è‚õîÔ∏è',
                                   reply_markup=menu_keyboards(callback_query.from_user.id))


@dp.callback_query_handler(state=[WorkListDelivery.choice_date])
async def add_delivery_date(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'exit':
        await back(callback_query, state)
    else:
        async with state.proxy() as data:
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=data['mes'].message_id)
            date = callback_query.data.split('_')[1]
            data['date'] = date
            mes = await bot.send_message(callback_query.from_user.id, f'{date}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É:',
                                         reply_markup=delivery_keyboard())
            data['mes'] = mes
            await WorkListDelivery.choice_delivery.set()


@dp.callback_query_handler(state=[WorkListDelivery.choice_delivery])
async def add_delivery_work(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'exit':
        await back(callback_query, state)
    else:
        async with state.proxy() as data:
            data['delivery_id'] = callback_query.data
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=data['mes'].message_id)
            mes = await bot.send_message(callback_query.from_user.id, f'\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:',
                                         reply_markup=generate_works(delivery=True))
            data['mes'] = mes
            await WorkListDelivery.choice_work.set()


@dp.callback_query_handler(state=[WorkListDelivery.choice_work, WorkListDelivery.input_num])
async def add_works_delivery(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'exit':
        await back(callback_query, state)
    else:
        async with state.proxy() as data:
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=data['mes'].message_id)
            if callback_query.data == 'send':
                date = data.get('date')
                works = data.get('works')
                delivery = data.get('delivery_id')

                if not works:
                    await bot.send_message(callback_query.from_user.id, '‚ùóÔ∏è–í—ã –Ω–∏ —á–µ–≥–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å‚ùóÔ∏è',
                                           reply_markup=menu_keyboards(callback_query.from_user.id))
                else:
                    user_id_site = User.get(User.telegram_id == callback_query.from_user.id).site_user_id
                    code = post_works(date, user_id_site, works, delivery)
                    if code == 200:
                        mes = '‚úÖ–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ‚úÖ'
                    elif code == 401:
                        mes = 'üõë–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —Å—É—â–µ—Å—Ç–≤—É–µ—Çüõë'
                    elif code == 403:
                        mes = '‚ùå–í—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ‚ùå'
                    else:
                        mes = '‚ò£Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞‚ò£Ô∏è'
                    await bot.send_message(callback_query.from_user.id, mes,
                                           reply_markup=menu_keyboards(callback_query.from_user.id))
                await state.reset_state()
                await state.finish()
            else:
                work_id = callback_query.data.split('_')
                data['current_work'] = int(work_id[1])
                await bot.send_message(callback_query.from_user.id,
                                       f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')
                await WorkListDelivery.input_num.set()


@dp.callback_query_handler(state='*')
async def add_works_delivery(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'exit':
        await back(callback_query, state)